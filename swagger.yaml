swagger: "2.0"
info:
  description: "An API with useful services like countries by continent, states by country, etcetera."
  version: "1.0.0"
  title: " API-Backend"
tags:
- name: "user"
  description: "Operations about user"
- name: "Utils"
  description: "Operations about user"
paths:
  /api/users:
    get:
      tags:
      - "user"
      summary: "Get list of users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
    post:
      tags:
      - "user"
      summary: "Create new user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
  
  /api/users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of user"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
    put:
      tags:
      - "user"
      summary: "Update user"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of user"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of user"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /api/auth/login:
    post:
      tags:
      - "user"
      summary: "Returns token if correct username and password is provided"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
  /api/auth/random-number:
    get:
      tags:
      - "Utils"
      summary: "Get user"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        description: "Bearer Token"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      mobileNumber:
        type: "string"
    xml:
      name: "User"
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"